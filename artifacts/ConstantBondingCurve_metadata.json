{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "FUNDING_GOAL",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "FUNDING_SUPPLY",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "ethAmount",
						"type": "uint256"
					}
				],
				"name": "calculateBuyReturn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenAmount",
						"type": "uint256"
					}
				],
				"name": "calculateSellReturn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A simple constant bonding curve contract for token pricing  This contract implements a linear bonding curve where the price remains constant. The exchange rate is fixed at FUNDING_SUPPLY tokens per FUNDING_GOAL ETH.  Key characteristics: - Linear relationship between ETH and tokens - No slippage or price impact - Fixed exchange rate of 40M tokens per ETH (800M / 20)",
			"kind": "dev",
			"methods": {
				"calculateBuyReturn(uint256)": {
					"details": "Uses simple proportion: tokens = (ethAmount * totalTokens) / totalEth",
					"params": {
						"ethAmount": "Amount of ETH being spent"
					},
					"returns": {
						"_0": "uint256 Number of tokens that can be purchased  Formula: tokenAmount = (ethAmount * FUNDING_SUPPLY) / FUNDING_GOAL Example: 1 ETH = (1 * 800M) / 20 = 40M tokens"
					}
				},
				"calculateSellReturn(uint256)": {
					"details": "Inverse of buy calculation: eth = (tokenAmount * totalEth) / totalTokens",
					"params": {
						"tokenAmount": "Number of tokens being sold"
					},
					"returns": {
						"_0": "uint256 Amount of ETH that will be received  Formula: ethAmount = (tokenAmount * FUNDING_GOAL) / FUNDING_SUPPLY Example: 40M tokens = (40M * 20) / 800M = 1 ETH"
					}
				}
			},
			"stateVariables": {
				"FUNDING_GOAL": {
					"details": "20 ETH funding goal"
				},
				"FUNDING_SUPPLY": {
					"details": "800 million tokens with 18 decimal places"
				}
			},
			"title": "ConstantBondingCurve",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"FUNDING_GOAL()": {
					"notice": "Target ETH amount to raise during funding"
				},
				"FUNDING_SUPPLY()": {
					"notice": "Total token supply available for funding phase"
				},
				"calculateBuyReturn(uint256)": {
					"notice": "Calculate how many tokens can be bought with given ETH amount"
				},
				"calculateSellReturn(uint256)": {
					"notice": "Calculate how much ETH can be received for selling tokens"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"ConstantBondingCurve.sol": "ConstantBondingCurve"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"ConstantBondingCurve.sol": {
			"keccak256": "0xf4aef8d5f1eb132f5fa041412d8bd6cd869f950e472117ab10d52a694396add7",
			"license": "MIT",
			"urls": [
				"bzz-raw://c559832b63dae9047ecb09eeb1c25badbd49015fa6238834999d432d13c67f7f",
				"dweb:/ipfs/QmPThm5XHHe9S7d7ru8TiSfmMj3EDxgjnKxy9vonRRcFmZ"
			]
		}
	},
	"version": 1
}